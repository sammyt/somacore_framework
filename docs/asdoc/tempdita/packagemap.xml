<?xml version="1.0" encoding="UTF-8"?><allClasses><apiPackage id="com.soma.core.controller"><apiName>com.soma.core.controller</apiName><apiDetail/><apiClassifier id="com.soma.core.controller:Command"><apiName>Command</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 Command class that will be instantiated when a registered event is dispatched, the framework will automatically call the execute method.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 Command class that will be instantiated when a registered event is dispatched, the framework will automatically call the execute method.
	 </apiDesc><example>Register a command.
	 <codeblock rev="3.0">
addCommand(MyEvent.DOSOMETHING, CommandExample);
dispatchEvent(new MyEvent(MyEvent.DOSOMETHING));
	 </codeblock>
	 <codeblock rev="3.0">
package  {
	import flash.events.Event;
	import com.soma.core.interfaces.ICommand;
	import com.soma.core.controller.Command;
	
	public class CommandExample extends Command implements ICommand {
		public function execute(event:Event):void {
			
		}
		
	}
}
	 </codeblock>
	 </example></apiClassifierDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link><link href="com.soma.core.controller.xml#ParallelCommand"><linktext>com.soma.core.controller.ParallelCommand</linktext></link><link href="com.soma.core.controller.xml#SequenceCommand"><linktext>com.soma.core.controller.SequenceCommand</linktext></link><link href="com.soma.core.interfaces.xml#ICommand"><linktext>com.soma.core.interfaces.ICommand</linktext></link></related-links><apiConstructor id="com.soma.core.controller:Command:Command"><apiName>Command</apiName><shortdesc>
		 Create an instance of the Command class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Create an instance of the Command class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.controller:Command:addCommand"><apiName>addCommand</apiName><shortdesc>
		 Registers a command to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/><apiDesc>Class that will be executed when a command has been dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a command to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener function that processes the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The priority level of the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or weak.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:Command:addModel"><apiName>addModel</apiName><shortdesc>
		 Registers a model to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The model instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>Instance of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a model to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:addView"><apiName>addView</apiName><shortdesc>
		 Registers a view to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The view instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>Instance of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a view to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:addWire"><apiName>addWire</apiName><shortdesc>
		 Registers a wire to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>Instance of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a wire to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
		 Dispatches an event into the event flow.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A value of true unless preventDefault() is called on the event, in which case it returns false.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The event object dispatched into the event flow.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatches an event into the event flow. The event target is the EventDispatcher object upon which dispatchEvent() is called.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:Command:getCommand"><apiName>getCommand</apiName><shortdesc>
		 Retrieves the command class that has been registered with a command name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A class.
		 </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the command class that has been registered with a command name.
		 </apiDesc><example><codeblock rev="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getCommands"><apiName>getCommands</apiName><shortdesc>
		 Retrieves all the command names (event type) that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Array of String (command name).
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the command names (event type) that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var commands:Array = getCommands();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc>
		 Retrieves the last sequence command that has been instantiated in the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An ISequenceCommand instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the last sequence command that has been instantiated in the framework.
		 </apiDesc><example><codeblock rev="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getModel"><apiName>getModel</apiName><shortdesc>
		 Retrieves the model instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A IModel instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the model instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getModels"><apiName>getModels</apiName><shortdesc>
		 Retrieves all the model instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the model instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var models:Dictionary = getModels();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc>
		 Retrieves all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Array of ISequenceCommand instances.
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">var sequencers:Array = getRunningSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getSequencer"><apiName>getSequencer</apiName><shortdesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A sequencer (ISequenceCommand).
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getView"><apiName>getView</apiName><shortdesc>
		 Retrieves the view instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Object instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the view instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getViews"><apiName>getViews</apiName><shortdesc>
		 Retrieves all the view instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the view instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var sprites:Dictionary = getViews();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getWire"><apiName>getWire</apiName><shortdesc>
		 Retrieves the wire instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the wire instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getWires"><apiName>getWires</apiName><shortdesc>
		 Retrieves all the wire instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the wire instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var wires:Dictionary = getWires();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:hasCommand"><apiName>hasCommand</apiName><shortdesc>
		 Indicates wether a command has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a command has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A value of true if a listener of the specified type is registered; false otherwise.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:Command:hasModel"><apiName>hasModel</apiName><shortdesc>
		 Indicates wether a model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a model has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:hasView"><apiName>hasView</apiName><shortdesc>
		 Indicates wether a view has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a view has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:hasWire"><apiName>hasWire</apiName><shortdesc>
		 Indicates wether a wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a wire has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:protected:initialize"><apiName>initialize</apiName><shortdesc> 
		 Method that you can optionally overwrite and that is called after the command has been registered with the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite and that is called after the command has been registered with the framework.
		 </apiDesc></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 </apiDesc><example><codeblock rev="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:removeCommand"><apiName>removeCommand</apiName><shortdesc>
		 Removes a command from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a command from the framework.
		 </apiDesc><example><codeblock rev="3.0">removeCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 Removes a listener from the EventDispatcher object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener object to remove. 
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the listener was registered for the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:Command:removeModel"><apiName>removeModel</apiName><shortdesc>
		 Removes a model from the framework and call the dispose method of this model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a model from the framework and call the dispose method of this model.
		 </apiDesc><example><codeblock rev="3.0">removeModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:removeView"><apiName>removeView</apiName><shortdesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 </apiDesc><example><codeblock rev="3.0">removeView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:removeWire"><apiName>removeWire</apiName><shortdesc>
		 Removes a wire from the framework and call the dispose method of this wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a wire from the framework and call the dispose method of this wire.
		 </apiDesc><example><codeblock rev="3.0">removeWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc>
		 Stops all the sequences command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops all the sequences command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">stopAllSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:stopSequencer"><apiName>stopSequencer</apiName><shortdesc>
		 Stops a sequence command using the sequence command instance itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean (true if the sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>The sequence command instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using the sequence command instance itself.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:willTrigger"><apiName>willTrigger</apiName><shortdesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A value of true if a listener of the specified type will be triggered; false otherwise. 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.soma.core.controller:Command:instance:get"><apiName>instance</apiName><shortdesc>
		 Retrieves the instance of the framework.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.interfaces:ISoma</apiValueClassifier></apiValueDef><apiDesc>
		 Retrieves the instance of the framework.
		 </apiDesc><example><codeblock rev="3.0">var myExtendedSomaClass:SomaApplication = SomaApplication(instance);</codeblock>
		 </example></apiValueDetail></apiValue><apiValue id="com.soma.core.controller:Command:stage:get"><apiName>stage</apiName><shortdesc>
		 Get the stage that has been registered to the framework.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc>
		 Get the stage that has been registered to the framework.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.controller:SequenceCommand"><apiName>SequenceCommand</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ISequenceCommand</apiBaseInterface><apiBaseClassifier>com.soma.core.controller:Command</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiConstructor id="com.soma.core.controller:SequenceCommand:SequenceCommand"><apiName>SequenceCommand</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.controller:SequenceCommand:protected:addSubCommand"><apiName>addSubCommand</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SequenceCommand:executeNextCommand"><apiName>executeNextCommand</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SequenceCommand:execute"><apiName>execute</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SequenceCommand:protected:initializeSubCommands"><apiName>initializeSubCommands</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SequenceCommand:protected:initialize"><apiName>initialize</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiFinal/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SequenceCommand:stop"><apiName>stop</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="com.soma.core.controller:SequenceCommand:commands:get"><apiName>commands</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.controller:SequenceCommand:currentCommand:get"><apiName>currentCommand</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:Event"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.controller:SequenceCommand:length:get"><apiName>length</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.controller:SomaController"><apiName>SomaController</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiConstructor id="com.soma.core.controller:SomaController:SomaController"><apiName>SomaController</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISoma</apiOperationClassifier></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.controller:SomaController:addCommand"><apiName>addCommand</apiName><shortdesc>
		 Registers a command to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/><apiDesc>Class that will be executed when a command has been dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a command to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SomaController:com.soma.core.controller:commandIsValid"><apiName>commandIsValid</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>CommandClass</apiItemName><apiType value="Class"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:dispose"><apiName>dispose</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:com.soma.core.controller:executeCommand"><apiName>executeCommand</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getCommand"><apiName>getCommand</apiName><shortdesc>
		 Retrieves the command class that has been registered with a command name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A class.
		 </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the command class that has been registered with a command name.
		 </apiDesc><example><codeblock rev="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getCommands"><apiName>getCommands</apiName><shortdesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A sequencer (ISequenceCommand).
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc>
		 Retrieves the last sequence command that has been instantiated in the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An ISequenceCommand instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the last sequence command that has been instantiated in the framework.
		 </apiDesc><example><codeblock rev="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc>
		 Retrieves all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An Array of ISequenceCommand instances.
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">var sequencers:Array = getRunningSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getSequencer"><apiName>getSequencer</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SomaController:hasCommand"><apiName>hasCommand</apiName><shortdesc>
		 Indicates wether a command has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a command has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SomaController:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 </apiDesc><example><codeblock rev="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SomaController:com.soma.core.controller:registerSequencedCommand"><apiName>registerSequencedCommand</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiParam><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:removeCommand"><apiName>removeCommand</apiName><shortdesc>
		 Removes a command from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a command from the framework.
		 </apiDesc><example><codeblock rev="3.0">removeCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SomaController:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc>
		 Stops all the sequences command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops all the sequences command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">stopAllSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SomaController:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SomaController:stopSequencer"><apiName>stopSequencer</apiName><shortdesc>
		 Stops a sequence command using the sequence command instance itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean (true if the sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>The sequence command instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using the sequence command instance itself.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SomaController:com.soma.core.controller:unregisterSequencedCommand"><apiName>unregisterSequencedCommand</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiParam><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:com.soma.core.controller:unregisterSequencer"><apiName>unregisterSequencer</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.controller:ParallelCommand"><apiName>ParallelCommand</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The ParallelCommand class is used to execute a list of commands at the same time.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:IParallelCommand</apiBaseInterface><apiBaseClassifier>com.soma.core.controller:Command</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 The ParallelCommand class is used to execute a list of commands at the same time.
	 </apiDesc><example>Register commands and a parallel command.
	 <codeblock rev="3.0">
addCommand(MyEvent.DO_SOMETHING, CommandExample);
addCommand(MyEvent.DO_SOMETHING_ELSE, CommandExample);
addCommand(MyEvent.EXECUTE_SEQUENCE, ParallelCommandExample);
dispatchEvent(new MyEvent(MyEvent.EXECUTE_SEQUENCE));
	 </codeblock>
	 <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.IParallelCommand;
	import com.soma.core.controller.ParallelCommand;
	
	public class ParallelCommandExample extends ParallelCommand implements IParallelCommand {
		public function ParallelCommandExample() {
			
		}
		
		override protected function initializeSubCommands():void {
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING));
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ELSE));
		}
		
	}
}
	 </codeblock>
	 </example></apiClassifierDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link><link href="com.soma.core.controller.xml#Command"><linktext>com.soma.core.controller.Command</linktext></link><link href="com.soma.core.controller.xml#SequenceCommand"><linktext>com.soma.core.controller.SequenceCommand</linktext></link><link href="com.soma.core.interfaces.xml#IParallelCommand"><linktext>com.soma.core.interfaces.IParallelCommand</linktext></link></related-links><apiConstructor id="com.soma.core.controller:ParallelCommand:ParallelCommand"><apiName>ParallelCommand</apiName><shortdesc>
		 Create an instance of the ParallelCommand class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Create an instance of the ParallelCommand class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.controller:ParallelCommand:protected:addSubCommand"><apiName>addSubCommand</apiName><shortdesc>
		 Add a command to the list of commands to execute in parallel.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance (must be registered as a command previously).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Add a command to the list of commands to execute in parallel.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:ParallelCommand:protected:initializeSubCommands"><apiName>initializeSubCommands</apiName><shortdesc> 
		 Method that you can overwrite to add commands to the sequence.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can overwrite to add commands to the sequence.
		 </apiDesc><example><codeblock rev="3.0">addSubCommand(new MyEvent(MyEvent.DO_SOMETHING));</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiValue id="com.soma.core.controller:ParallelCommand:commands:get"><apiName>commands</apiName><shortdesc>
		 Retrieves the list of commands added as subcommands.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Retrieves the list of commands added as subcommands.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.controller:ParallelCommand:length:get"><apiName>length</apiName><shortdesc>
		 Retrieves the number of commands added as subcommands.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Retrieves the number of commands added as subcommands.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="com.soma.core.interfaces"><apiName>com.soma.core.interfaces</apiName><apiDetail/><apiClassifier id="com.soma.core.interfaces:ISequenceCommand"><apiName>ISequenceCommand</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ICommand</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:ISequenceCommand:com.soma.core.interfaces:ISequenceCommand:executeNextCommand"><apiName>executeNextCommand</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISequenceCommand:com.soma.core.interfaces:ISequenceCommand:stop"><apiName>stop</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="com.soma.core.interfaces:ISequenceCommand:com.soma.core.interfaces:ISequenceCommand:commands:get"><apiName>commands</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISequenceCommand:com.soma.core.interfaces:ISequenceCommand:currentCommand:get"><apiName>currentCommand</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:Event"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISequenceCommand:com.soma.core.interfaces:ISequenceCommand:length:get"><apiName>length</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.interfaces:ISoma"><apiName>ISoma</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addCommand"><apiName>addCommand</apiName><shortdesc>
		 Registers a command to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/><apiDesc>Class that will be executed when a command has been dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a command to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addEventListener"><apiName>addEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addModel"><apiName>addModel</apiName><shortdesc>
		 Registers a model to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The model instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>Instance of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a model to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addView"><apiName>addView</apiName><shortdesc>
		 Registers a view to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The view instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>Instance of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a view to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addWire"><apiName>addWire</apiName><shortdesc>
		 Registers a wire to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>Instance of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a wire to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:createPluginFromClassName"><apiName>createPluginFromClassName</apiName><shortdesc>
		 Creates a plugin instance using the class name and the getDefinitionByName method.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An instance of the plugin.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISomaPlugin</apiOperationClassifier></apiReturn><apiParam><apiItemName>pluginClassName</apiItemName><apiType value="String"/><apiDesc>Class name of the plugin that will be instantiated.
		 </apiDesc></apiParam><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier><apiDesc>Value Object class of the plugin.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a plugin instance using the class name and the getDefinitionByName method.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPluginFromClassName("com.soma.core.debugger.SomaDebugger", pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:createPlugin"><apiName>createPlugin</apiName><shortdesc>
		 Creates a plugin instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An instance of the plugin.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISomaPlugin</apiOperationClassifier></apiReturn><apiParam><apiItemName>plugin</apiItemName><apiType value="Class"/><apiDesc>Class of the plugin that will be instantiated.
		 </apiDesc></apiParam><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier><apiDesc>Value Object class of the plugin.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a plugin instance.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPlugin(SomaDebugger, pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the SomaCore core classes and elements registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the SomaCore core classes and elements registered to the framework.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getCommand"><apiName>getCommand</apiName><shortdesc>
		 Retrieves the command class that has been registered with a command name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A class.
		 </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the command class that has been registered with a command name.
		 </apiDesc><example><codeblock rev="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getCommands"><apiName>getCommands</apiName><shortdesc>
		 Retrieves all the command names (event type) that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An Array of String (command name).
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the command names (event type) that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var commands:Array = getCommands();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc>
		 Retrieves the last sequence command that has been instantiated in the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An ISequenceCommand instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the last sequence command that has been instantiated in the framework.
		 </apiDesc><example><codeblock rev="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getModel"><apiName>getModel</apiName><shortdesc>
		 Retrieves the model instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A IModel instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the model instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getModels"><apiName>getModels</apiName><shortdesc>
		 Retrieves all the model instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the model instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var models:Dictionary = getModels();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc>
		 Retrieves all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An Array of ISequenceCommand instances.
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">var sequencers:Array = getRunningSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getSequencer"><apiName>getSequencer</apiName><shortdesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A sequencer (ISequenceCommand).
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getView"><apiName>getView</apiName><shortdesc>
		 Retrieves the view instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An Object instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the view instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getViews"><apiName>getViews</apiName><shortdesc>
		 Retrieves all the view instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the view instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var sprites:Dictionary = getViews();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getWire"><apiName>getWire</apiName><shortdesc>
		 Retrieves the wire instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the wire instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getWires"><apiName>getWires</apiName><shortdesc>
		 Retrieves all the wire instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the wire instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var wires:Dictionary = getWires();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasCommand"><apiName>hasCommand</apiName><shortdesc>
		 Indicates wether a command has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a command has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasEventListener"><apiName>hasEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasModel"><apiName>hasModel</apiName><shortdesc>
		 Indicates wether a model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a model has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasView"><apiName>hasView</apiName><shortdesc>
		 Indicates wether a view has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a view has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasWire"><apiName>hasWire</apiName><shortdesc>
		 Indicates wether a wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a wire has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 </apiDesc><example><codeblock rev="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeCommand"><apiName>removeCommand</apiName><shortdesc>
		 Removes a command from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a command from the framework.
		 </apiDesc><example><codeblock rev="3.0">removeCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeEventListener"><apiName>removeEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeModel"><apiName>removeModel</apiName><shortdesc>
		 Removes a model from the framework and call the dispose method of this model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a model from the framework and call the dispose method of this model.
		 </apiDesc><example><codeblock rev="3.0">removeModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeView"><apiName>removeView</apiName><shortdesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 </apiDesc><example><codeblock rev="3.0">removeView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeWire"><apiName>removeWire</apiName><shortdesc>
		 Removes a wire from the framework and call the dispose method of this wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a wire from the framework and call the dispose method of this wire.
		 </apiDesc><example><codeblock rev="3.0">removeWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc>
		 Stops all the sequences command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops all the sequences command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">stopAllSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:stopSequencer"><apiName>stopSequencer</apiName><shortdesc>
		 Stops a sequence command using the sequence command instance itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean (true if the sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>The sequence command instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using the sequence command instance itself.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:willTrigger"><apiName>willTrigger</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:controller:get"><apiName>controller</apiName><shortdesc>
		 Gets the commands manager class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.controller:SomaController</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the commands manager class.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:models:get"><apiName>models</apiName><shortdesc>
		 Gets the model manager class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.model:SomaModels</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the model manager class.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:stage:get"><apiName>stage</apiName><shortdesc>
		 Get the stage that has been registered to the framework.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc>
		 Get the stage that has been registered to the framework.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:views:get"><apiName>views</apiName><shortdesc>
		 Gets the view manager class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.view:SomaViews</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the view manager class.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:wires:get"><apiName>wires</apiName><shortdesc>
		 Gets the wires manager class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.wire:SomaWires</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the wires manager class.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.interfaces:ISomaPluginVO"><apiName>ISomaPluginVO</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail></apiClassifier><apiClassifier id="com.soma.core.interfaces:ICommand"><apiName>ICommand</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:ICommand:com.soma.core.interfaces:ICommand:execute"><apiName>execute</apiName><shortdesc>
		 Method called by the framework, this is the execution of the command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance dispatched to execute the command.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Method called by the framework, this is the execution of the command.
		 You can access from all the framework elements in this method (wires, commands, models, views, instance of the framework and stage).
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.interfaces:IModel"><apiName>IModel</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:IModel:com.soma.core.interfaces:IModel:getName"><apiName>getName</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IModel:com.soma.core.interfaces:IModel:setName"><apiName>setName</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="com.soma.core.interfaces:IModel:com.soma.core.interfaces:IModel:data:get"><apiName>data</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:IModel:com.soma.core.interfaces:IModel:dispatcher:get"><apiName>dispatcher</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.interfaces:IResponder"><apiName>IResponder</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:IResponder:com.soma.core.interfaces:IResponder:fault"><apiName>fault</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>info</apiItemName><apiType value="Object"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IResponder:com.soma.core.interfaces:IResponder:result"><apiName>result</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.interfaces:ICommandASync"><apiName>ICommandASync</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ICommand</apiBaseInterface><apiBaseInterface>com.soma.core.interfaces:IResponder</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail></apiClassifier><apiClassifier id="com.soma.core.interfaces:IParallelCommand"><apiName>IParallelCommand</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ICommand</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiValue id="com.soma.core.interfaces:IParallelCommand:com.soma.core.interfaces:IParallelCommand:commands:get"><apiName>commands</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:IParallelCommand:com.soma.core.interfaces:IParallelCommand:length:get"><apiName>length</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.interfaces:IWire"><apiName>IWire</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:IWire:com.soma.core.interfaces:IWire:getName"><apiName>getName</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IWire:com.soma.core.interfaces:IWire:setName"><apiName>setName</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.interfaces:ISomaPlugin"><apiName>ISomaPlugin</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:ISomaPlugin:com.soma.core.interfaces:ISomaPlugin:dispose"><apiName>dispose</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaPlugin:com.soma.core.interfaces:ISomaPlugin:initialize"><apiName>initialize</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation></apiClassifier></apiPackage><apiPackage id="com.soma.core.model"><apiName>com.soma.core.model</apiName><apiDetail/><apiClassifier id="com.soma.core.model:Model"><apiName>Model</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:IModel</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiConstructor id="com.soma.core.model:Model:Model"><apiName>Model</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData></apiParam><apiParam><apiItemName>dispatcher</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.model:Model:addEventListener"><apiName>addEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:protected:dispose"><apiName>dispose</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:getName"><apiName>getName</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:hasEventListener"><apiName>hasEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:protected:initialize"><apiName>initialize</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:somans:registerDispatcher"><apiName>registerDispatcher</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="somans"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dispatcher</apiItemName><apiType value="flash.events:IEventDispatcher"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:removeEventListener"><apiName>removeEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:setName"><apiName>setName</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:willTrigger"><apiName>willTrigger</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="com.soma.core.model:Model:NAME"><apiName>NAME</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>Soma::Model</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.model:Model:protected:_data"><apiName>_data</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.model:Model:protected:_dispatcher"><apiName>_dispatcher</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.events:IEventDispatcher"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.model:Model:protected:_name"><apiName>_name</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.model:Model:data:get"><apiName>data</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.model:Model:dispatcher:get"><apiName>dispatcher</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.model:SomaModels"><apiName>SomaModels</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiConstructor id="com.soma.core.model:SomaModels:SomaModels"><apiName>SomaModels</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISoma</apiOperationClassifier></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.model:SomaModels:addModel"><apiName>addModel</apiName><shortdesc>
		 Registers a model to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The model instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>Instance of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a model to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.model:SomaModels:dispose"><apiName>dispose</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:SomaModels:getModel"><apiName>getModel</apiName><shortdesc>
		 Retrieves the model instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A IModel instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the model instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.model:SomaModels:getModels"><apiName>getModels</apiName><shortdesc>
		 Retrieves all the model instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the model instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var models:Dictionary = getModels();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.model:SomaModels:hasModel"><apiName>hasModel</apiName><shortdesc>
		 Indicates wether a model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a model has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.model:SomaModels:removeModel"><apiName>removeModel</apiName><shortdesc>
		 Removes a model from the framework and call the dispose method of this model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a model from the framework and call the dispose method of this model.
		 </apiDesc><example><codeblock rev="3.0">removeModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiValue id="com.soma.core.model:SomaModels:protected:models"><apiName>models</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="com.soma.core.view"><apiName>com.soma.core.view</apiName><apiDetail/><apiClassifier id="com.soma.core.view:SomaViews"><apiName>SomaViews</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiConstructor id="com.soma.core.view:SomaViews:SomaViews"><apiName>SomaViews</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.view:SomaViews:addView"><apiName>addView</apiName><shortdesc>
		 Registers a view to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The view instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>Instance of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a view to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.view:SomaViews:dispose"><apiName>dispose</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.view:SomaViews:getView"><apiName>getView</apiName><shortdesc>
		 Retrieves the view instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An Object instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the view instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.view:SomaViews:getViews"><apiName>getViews</apiName><shortdesc>
		 Retrieves all the view instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the view instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var sprites:Dictionary = getViews();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.view:SomaViews:hasView"><apiName>hasView</apiName><shortdesc>
		 Indicates wether a view has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a view has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.view:SomaViews:removeView"><apiName>removeView</apiName><shortdesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 </apiDesc><example><codeblock rev="3.0">removeView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiValue id="com.soma.core.view:SomaViews:protected:views"><apiName>views</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="com.soma.core.wire"><apiName>com.soma.core.wire</apiName><apiDetail/><apiClassifier id="com.soma.core.wire:Wire"><apiName>Wire</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:IWire</apiBaseInterface><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiConstructor id="com.soma.core.wire:Wire:Wire"><apiName>Wire</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.wire:Wire:addCommand"><apiName>addCommand</apiName><shortdesc>
		 Registers a command to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/><apiDesc>Class that will be executed when a command has been dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a command to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:addEventListener"><apiName>addEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:addModel"><apiName>addModel</apiName><shortdesc>
		 Registers a model to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The model instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>Instance of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a model to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:addView"><apiName>addView</apiName><shortdesc>
		 Registers a view to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The view instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>Instance of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a view to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:addWire"><apiName>addWire</apiName><shortdesc>
		 Registers a wire to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>Instance of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a wire to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:protected:dispose"><apiName>dispose</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:getCommand"><apiName>getCommand</apiName><shortdesc>
		 Retrieves the command class that has been registered with a command name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A class.
		 </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the command class that has been registered with a command name.
		 </apiDesc><example><codeblock rev="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getCommands"><apiName>getCommands</apiName><shortdesc>
		 Retrieves all the command names (event type) that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Array of String (command name).
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the command names (event type) that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var commands:Array = getCommands();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc>
		 Retrieves the last sequence command that has been instantiated in the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An ISequenceCommand instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the last sequence command that has been instantiated in the framework.
		 </apiDesc><example><codeblock rev="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getModel"><apiName>getModel</apiName><shortdesc>
		 Retrieves the model instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A IModel instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the model instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getModels"><apiName>getModels</apiName><shortdesc>
		 Retrieves all the model instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the model instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var models:Dictionary = getModels();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getName"><apiName>getName</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc>
		 Retrieves all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Array of ISequenceCommand instances.
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">var sequencers:Array = getRunningSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getSequencer"><apiName>getSequencer</apiName><shortdesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A sequencer (ISequenceCommand).
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getView"><apiName>getView</apiName><shortdesc>
		 Retrieves the view instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Object instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the view instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getViews"><apiName>getViews</apiName><shortdesc>
		 Retrieves all the view instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the view instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var sprites:Dictionary = getViews();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getWire"><apiName>getWire</apiName><shortdesc>
		 Retrieves the wire instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the wire instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getWires"><apiName>getWires</apiName><shortdesc>
		 Retrieves all the wire instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the wire instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var wires:Dictionary = getWires();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasCommand"><apiName>hasCommand</apiName><shortdesc>
		 Indicates wether a command has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a command has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasEventListener"><apiName>hasEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasModel"><apiName>hasModel</apiName><shortdesc>
		 Indicates wether a model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a model has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasView"><apiName>hasView</apiName><shortdesc>
		 Indicates wether a view has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a view has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasWire"><apiName>hasWire</apiName><shortdesc>
		 Indicates wether a wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a wire has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:protected:initialize"><apiName>initialize</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 </apiDesc><example><codeblock rev="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:somans:registerInstance"><apiName>registerInstance</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="somans"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISoma</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeCommand"><apiName>removeCommand</apiName><shortdesc>
		 Removes a command from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a command from the framework.
		 </apiDesc><example><codeblock rev="3.0">removeCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeEventListener"><apiName>removeEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeModel"><apiName>removeModel</apiName><shortdesc>
		 Removes a model from the framework and call the dispose method of this model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a model from the framework and call the dispose method of this model.
		 </apiDesc><example><codeblock rev="3.0">removeModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeView"><apiName>removeView</apiName><shortdesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 </apiDesc><example><codeblock rev="3.0">removeView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeWire"><apiName>removeWire</apiName><shortdesc>
		 Removes a wire from the framework and call the dispose method of this wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a wire from the framework and call the dispose method of this wire.
		 </apiDesc><example><codeblock rev="3.0">removeWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:setName"><apiName>setName</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc>
		 Stops all the sequences command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops all the sequences command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">stopAllSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:stopSequencer"><apiName>stopSequencer</apiName><shortdesc>
		 Stops a sequence command using the sequence command instance itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean (true if the sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>The sequence command instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using the sequence command instance itself.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:willTrigger"><apiName>willTrigger</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="com.soma.core.wire:Wire:NAME"><apiName>NAME</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>Soma::Wire</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.wire:Wire:protected:_name"><apiName>_name</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.wire:Wire:instance:get"><apiName>instance</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.interfaces:ISoma</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.wire:Wire:stage:get"><apiName>stage</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.wire:SomaWires"><apiName>SomaWires</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 
	 </apiDesc><example><codeblock rev="3.0">
	 </codeblock>
	 </example></apiClassifierDetail><apiConstructor id="com.soma.core.wire:SomaWires:SomaWires"><apiName>SomaWires</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISoma</apiOperationClassifier></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.wire:SomaWires:addWire"><apiName>addWire</apiName><shortdesc>
		 Registers a wire to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>Instance of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a wire to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:dispose"><apiName>dispose</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:getWire"><apiName>getWire</apiName><shortdesc>
		 Retrieves the wire instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the wire instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:getWires"><apiName>getWires</apiName><shortdesc>
		 Retrieves all the wire instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the wire instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var wires:Dictionary = getWires();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:hasWire"><apiName>hasWire</apiName><shortdesc>
		 Indicates wether a wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a wire has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:removeWire"><apiName>removeWire</apiName><shortdesc>
		 Removes a wire from the framework and call the dispose method of this wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a wire from the framework and call the dispose method of this wire.
		 </apiDesc><example><codeblock rev="3.0">removeWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiValue id="com.soma.core.wire:SomaWires:protected:wires"><apiName>wires</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="com.soma.core"><apiName>com.soma.core</apiName><apiDetail/><apiClassifier id="com.soma.core:Soma"><apiName>Soma</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 SomaCore is a lightweight event-based MVC framework written in AS3 that provides a structure, models, views management and commands.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ISoma</apiBaseInterface><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 <p>SomaCore is a lightweight event-based MVC framework written in AS3 that provides a structure, models, views management and commands.
	 Somacore can be used for Flash, Flex and AIR projects. SomaCore does not use any external library and does not use dependency injection. SomaCore is completely event-based and use a concept of wires to code in a efficient decoupled way.
	 You can use SomaCore in anything, except to include/distribute it in another framework, application, template, component or structure that is meant to build, scaffold or generate source files.</p>
	 <p>Few things to know: SomaCore requires the stage to be instantiated. Commands are normal built-in Flash events with the bubbles property set to true. Commands can be used in the views as they are not really framework code.
	 Wires are the glue of the frameworks elements (models, commands, views, wires) and can be used the way you wish, as proxy/mediators or managers.
	 Wires can manage one class or multiple classes.
	 Parallel and sequence commands are built-in.
	 You can create and register customs plugins to the framework (such as the SomaCoreDebugger plugin).
	 You can access to all the framework elements that you have registered (stage, framework instance, wires, models, views and commands) from commands and wires. 
	 </p>
	 </apiDesc><example>To get started, create a instance of a class that extends the Soma class and implements the ISoma interface.
	 <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.ISoma;
	import flash.display.Sprite;
	
	public class Main extends Sprite {
		
		private var _app:ISoma;
		
		public function Main() {
			_app = new SomaApplication(stage);
		}
		
	}
}
	 </codeblock>
	 <codeblock rev="3.0">
package  {
	import com.soma.core.Soma;
	import com.soma.core.interfaces.ISoma;
	import flash.display.Stage;
	
	public class SomaApplication extends Soma implements ISoma {
		public function SomaApplication(stage:Stage) {
			super(stage);
		}
		
		override protected function registerCommands():void {
			
		}
		override protected function registerModels():void {
			
		}
		override protected function registerPlugins():void {
			
		}
		override protected function registerViews():void {
			
		}
		override protected function registerWires():void {
			
		}
		
	}
}
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiConstructor id="com.soma.core:Soma:Soma"><apiName>Soma</apiName><shortdesc>
		 Create an instance of the SomaCore class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>stage</apiItemName><apiType value="flash.display:Stage"/><apiDesc>The stage is used as a global EventDispatcher (as well as the Soma class), and is required to instantiate the framework.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of the SomaCore class.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core:Soma:addCommand"><apiName>addCommand</apiName><shortdesc>
		 Registers a command to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/><apiDesc>Class that will be executed when a command has been dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a command to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:addModel"><apiName>addModel</apiName><shortdesc>
		 Registers a model to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The model instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>Instance of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a model to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:addView"><apiName>addView</apiName><shortdesc>
		 Registers a view to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The view instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>Instance of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a view to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:addWire"><apiName>addWire</apiName><shortdesc>
		 Registers a wire to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>Instance of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a wire to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:createPluginFromClassName"><apiName>createPluginFromClassName</apiName><shortdesc>
		 Creates a plugin instance using the class name and the getDefinitionByName method.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An instance of the plugin.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISomaPlugin</apiOperationClassifier></apiReturn><apiParam><apiItemName>pluginClassName</apiItemName><apiType value="String"/><apiDesc>Class name of the plugin that will be instantiated.
		 </apiDesc></apiParam><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier><apiDesc>Value Object class of the plugin.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a plugin instance using the class name and the getDefinitionByName method.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPluginFromClassName("com.soma.core.debugger.SomaDebugger", pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:createPlugin"><apiName>createPlugin</apiName><shortdesc>
		 Creates a plugin instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An instance of the plugin.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISomaPlugin</apiOperationClassifier></apiReturn><apiParam><apiItemName>plugin</apiItemName><apiType value="Class"/><apiDesc>Class of the plugin that will be instantiated.
		 </apiDesc></apiParam><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier><apiDesc>Value Object class of the plugin.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a plugin instance.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPlugin(SomaDebugger, pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the SomaCore core classes and elements registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the SomaCore core classes and elements registered to the framework.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:getCommand"><apiName>getCommand</apiName><shortdesc>
		 Retrieves the command class that has been registered with a command name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A class.
		 </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the command class that has been registered with a command name.
		 </apiDesc><example><codeblock rev="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getCommands"><apiName>getCommands</apiName><shortdesc>
		 Retrieves all the command names (event type) that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Array of String (command name).
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the command names (event type) that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var commands:Array = getCommands();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc>
		 Retrieves the last sequence command that has been instantiated in the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An ISequenceCommand instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the last sequence command that has been instantiated in the framework.
		 </apiDesc><example><codeblock rev="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getModel"><apiName>getModel</apiName><shortdesc>
		 Retrieves the model instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A IModel instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the model instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getModels"><apiName>getModels</apiName><shortdesc>
		 Retrieves all the model instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the model instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var models:Dictionary = getModels();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc>
		 Retrieves all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Array of ISequenceCommand instances.
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">var sequencers:Array = getRunningSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getSequencer"><apiName>getSequencer</apiName><shortdesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A sequencer (ISequenceCommand).
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getView"><apiName>getView</apiName><shortdesc>
		 Retrieves the view instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Object instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the view instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getViews"><apiName>getViews</apiName><shortdesc>
		 Retrieves all the view instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the view instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var sprites:Dictionary = getViews();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getWire"><apiName>getWire</apiName><shortdesc>
		 Retrieves the wire instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the wire instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getWires"><apiName>getWires</apiName><shortdesc>
		 Retrieves all the wire instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the wire instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var wires:Dictionary = getWires();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:hasCommand"><apiName>hasCommand</apiName><shortdesc>
		 Indicates wether a command has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a command has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:hasModel"><apiName>hasModel</apiName><shortdesc>
		 Indicates wether a model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a model has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:hasView"><apiName>hasView</apiName><shortdesc>
		 Indicates wether a view has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a view has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:hasWire"><apiName>hasWire</apiName><shortdesc>
		 Indicates wether a wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a wire has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 </apiDesc><example><codeblock rev="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerCommands"><apiName>registerCommands</apiName><shortdesc> 
		 Method that you can optionally overwrite to register commands (mapping events to command classes) to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register commands (mapping events to command classes) to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETING, MyCommandClass);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerModels"><apiName>registerModels</apiName><shortdesc> 
		 Method that you can optionally overwrite to register models to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register models to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerPlugins"><apiName>registerPlugins</apiName><shortdesc> 
		 Method that you can optionally overwrite to register plugins to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register plugins to the framework.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPlugin(SomaDebugger, pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerViews"><apiName>registerViews</apiName><shortdesc> 
		 Method that you can optionally overwrite to register views to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register views to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerWires"><apiName>registerWires</apiName><shortdesc> 
		 Method that you can optionally overwrite to register wires to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register wires to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:removeCommand"><apiName>removeCommand</apiName><shortdesc>
		 Removes a command from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a command from the framework.
		 </apiDesc><example><codeblock rev="3.0">removeCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:removeModel"><apiName>removeModel</apiName><shortdesc>
		 Removes a model from the framework and call the dispose method of this model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a model from the framework and call the dispose method of this model.
		 </apiDesc><example><codeblock rev="3.0">removeModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:removeView"><apiName>removeView</apiName><shortdesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 </apiDesc><example><codeblock rev="3.0">removeView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:removeWire"><apiName>removeWire</apiName><shortdesc>
		 Removes a wire from the framework and call the dispose method of this wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a wire from the framework and call the dispose method of this wire.
		 </apiDesc><example><codeblock rev="3.0">removeWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc>
		 Stops all the sequences command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops all the sequences command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">stopAllSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:stopSequencer"><apiName>stopSequencer</apiName><shortdesc>
		 Stops a sequence command using the sequence command instance itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean (true if the sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>The sequence command instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using the sequence command instance itself.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiValue id="com.soma.core:Soma:controller:get"><apiName>controller</apiName><shortdesc>
		 Gets the commands manager class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.controller:SomaController</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the commands manager class.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core:Soma:models:get"><apiName>models</apiName><shortdesc>
		 Gets the model manager class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.model:SomaModels</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the model manager class.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core:Soma:stage:get"><apiName>stage</apiName><shortdesc>
		 Get the stage that has been registered to the framework.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc>
		 Get the stage that has been registered to the framework.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core:Soma:views:get"><apiName>views</apiName><shortdesc>
		 Gets the view manager class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.view:SomaViews</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the view manager class.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core:Soma:wires:get"><apiName>wires</apiName><shortdesc>
		 Gets the wires manager class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.wire:SomaWires</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the wires manager class.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage></allClasses>