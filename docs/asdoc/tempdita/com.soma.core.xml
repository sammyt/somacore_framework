<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.soma.core"><apiName>com.soma.core</apiName><apiDetail/><apiClassifier id="com.soma.core:Soma"><apiName>Soma</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v1.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 SomaCore is a lightweight event-based MVC framework written in AS3 that provides a structure, models, views management and commands.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ISoma</apiBaseInterface><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v1.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 <p>SomaCore is a lightweight event-based MVC framework written in AS3 that provides a structure, models, views management and commands.
	 Somacore can be used for Flash, Flex and AIR projects. SomaCore does not use any external library and does not use dependency injection. SomaCore is completely event-based and use a concept of wires to code in a efficient decoupled way.
	 You can use SomaCore in anything, except to include/distribute it in another framework, application, template, component or structure that is meant to build, scaffold or generate source files.</p>
	 <p>Few things to know: SomaCore requires the stage to be instantiated. Commands are normal built-in Flash events with the bubbles property set to true. Commands can be used in the views as they are not really framework code.
	 Wires are the glue of the frameworks elements (models, commands, views, wires) and can be used the way you wish, as proxy/mediators or managers.
	 Wires can manage one class or multiple classes.
	 Parallel and sequence commands are built-in.
	 You can create and register customs plugins to the framework (such as the SomaCoreDebugger plugin).
	 You can access to all the framework elements that you have registered (stage, framework instance, wires, models, views and commands) from commands and wires. 
	 </p>
	 </apiDesc><example>To get started, create a instance of a class that extends the Soma class and implements the ISoma interface.
	 <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.ISoma;
	import flash.display.Sprite;
	
	public class Main extends Sprite {
		
		private var _app:ISoma;
		
		public function Main() {
			_app = new SomaApplication(stage);
		}
		
	}
}
	 </codeblock>
	 <codeblock rev="3.0">
package  {
	import com.soma.core.Soma;
	import com.soma.core.interfaces.ISoma;
	import flash.display.Stage;
	
	public class SomaApplication extends Soma implements ISoma {
		public function SomaApplication(stage:Stage) {
			super(stage);
		}
		
		override protected function registerCommands():void {
			
		}
		override protected function registerModels():void {
			
		}
		override protected function registerPlugins():void {
			
		}
		override protected function registerViews():void {
			
		}
		override protected function registerWires():void {
			
		}
		
	}
}
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiConstructor id="com.soma.core:Soma:Soma"><apiName>Soma</apiName><shortdesc>
		 Create an instance of the SomaCore class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>stage</apiItemName><apiType value="flash.display:Stage"/><apiDesc>The stage is used as a global EventDispatcher (as well as the Soma class), and is required to instantiate the framework.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of the SomaCore class.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core:Soma:addCommand"><apiName>addCommand</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:addModel"><apiName>addModel</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:addView"><apiName>addView</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>view</apiItemName><apiType value="Object"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:addWire"><apiName>addWire</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:createPluginFromClassName"><apiName>createPluginFromClassName</apiName><shortdesc>
		 Creates a plugin instance using the class name and the getDefinitionByName method.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An instance of the plugin.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISomaPlugin</apiOperationClassifier></apiReturn><apiParam><apiItemName>pluginClassName</apiItemName><apiType value="String"/><apiDesc>Class name of the plugin that will be instantiated.
		 </apiDesc></apiParam><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier><apiDesc>Value Object class of the plugin.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a plugin instance using the class name and the getDefinitionByName method.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPluginFromClassName("com.soma.core.debugger.SomaDebugger", pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:createPlugin"><apiName>createPlugin</apiName><shortdesc>
		 Creates a plugin instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An instance of the plugin.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISomaPlugin</apiOperationClassifier></apiReturn><apiParam><apiItemName>plugin</apiItemName><apiType value="Class"/><apiDesc>Class of the plugin that will be instantiated.
		 </apiDesc></apiParam><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier><apiDesc>Value Object class of the plugin.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a plugin instance.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPlugin(SomaDebugger, pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the SomaCore core classes and elements registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the SomaCore core classes and elements registered to the framework.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:getCommand"><apiName>getCommand</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Class"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:getCommands"><apiName>getCommands</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Array"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:getModel"><apiName>getModel</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:getModels"><apiName>getModels</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Array"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:getSequencer"><apiName>getSequencer</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:getView"><apiName>getView</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:getViews"><apiName>getViews</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:getWire"><apiName>getWire</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:getWires"><apiName>getWires</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:hasCommand"><apiName>hasCommand</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:hasModel"><apiName>hasModel</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:hasView"><apiName>hasView</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:hasWire"><apiName>hasWire</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerCommands"><apiName>registerCommands</apiName><shortdesc> 
		 Method that you can optionally overwrite to register commands (mapping events to command classes) to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register commands (mapping events to command classes) to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETING, MyCommandClass);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerModels"><apiName>registerModels</apiName><shortdesc> 
		 Method that you can optionally overwrite to register models to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register models to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerPlugins"><apiName>registerPlugins</apiName><shortdesc> 
		 Method that you can optionally overwrite to register plugins to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register plugins to the framework.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPlugin(SomaDebugger, pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerViews"><apiName>registerViews</apiName><shortdesc> 
		 Method that you can optionally overwrite to register views to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register views to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerWires"><apiName>registerWires</apiName><shortdesc> 
		 Method that you can optionally overwrite to register wires to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register wires to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:removeCommand"><apiName>removeCommand</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:removeModel"><apiName>removeModel</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:removeView"><apiName>removeView</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:removeWire"><apiName>removeWire</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:stopSequencer"><apiName>stopSequencer</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="com.soma.core:Soma:controller:get"><apiName>controller</apiName><shortdesc>
		 Gets the commands manager class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.controller:SomaController</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the commands manager class.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core:Soma:models:get"><apiName>models</apiName><shortdesc>
		 Gets the model manager class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.model:SomaModels</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the model manager class.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core:Soma:stage:get"><apiName>stage</apiName><shortdesc>
		 Get the stage that has been registered to the framework.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc>
		 Get the stage that has been registered to the framework.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core:Soma:views:get"><apiName>views</apiName><shortdesc>
		 Gets the view manager class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.view:SomaViews</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the view manager class.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core:Soma:wires:get"><apiName>wires</apiName><shortdesc>
		 Gets the wires manager class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.wire:SomaWires</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the wires manager class.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>